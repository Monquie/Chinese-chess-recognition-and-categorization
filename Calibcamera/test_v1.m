% Auto-generated by cameraCalibrator app on 14-Nov-2019
%-------------------------------------------------------


% Define images to process
imageFileNames = {'Image1.png',...
    'Image2.png',...
    'Image5.png',...
    'Image6.png',...
    'Image7.png',...
    'Image8.png',...
    'Image9.png',...
    'Image10.png',...
    'Image11.png',...
    'Image12.png',...
    'Image13.png',...
    'Image14.png',...
    'Image15.png',...
    'Image16.png',...
    };

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Generate world coordinates of the corners of the squares
squareSize = 20;  % in units of 'mm'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'mm', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', []);

% For example, you can use the calibration data to remove effects of lens distortion.
I = imread('Image17.png');
imageSize = [size(I,1) size(I,2)];
PointI = detectCheckerboardPoints(I);

[R,t] = extrinsics(PointI,worldPoints,cameraParams);

newWorldPoints = pointsToWorld(cameraParams,R,t,PointI);
error2World = newWorldPoints - worldPoints;
plot(error2World); 
xlabel('Keypoint');
ylabel('Error (mm)');
legend('Error of x axis','Error of y axis');
